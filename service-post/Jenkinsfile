pipeline {
    agent any

    stages {
        stage('Clone') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                dir('service-post') {
                    sh 'chmod +x ./gradlew'
                    sh './gradlew build'
                    sh 'docker build -t ${DOCKER_IMAGE_NAME} .'
                }
            }
        }

        stage('Remove container') {
            steps {
                script {
                    try {
                        sh 'docker stop ${DOCKER_CONTAINER_NAME}'
                        sh 'docker rm ${DOCKER_CONTAINER_NAME}'
                    } catch (e) {
                        echo 'Failed to remove container'
                        echo 'Maybe container is already removed.'
                    }
                }
            }
        }

        stage('Create container') {
            steps {
                sh 'docker run --name ${DOCKER_CONTAINER_NAME} -d -v ${DOCKER_CONFIGS_PATH}:/configs -e PROFILE=${DOCKER_PROFILE} -e APPLICATION_PORT=${DOCKER_APPLICATION_PORT} -e CONFIG_SERVER_URL=${DOCKER_CONFIG_SERVER_URL} -e EUREKA_URL=${DOCKER_EUREKA_URL} --net ${DOCKER_NETWORK_NAME} --ip ${DOCKER_APPLICATION_IP} ${DOCKER_IMAGE_NAME}'
            }
        }
    }
}